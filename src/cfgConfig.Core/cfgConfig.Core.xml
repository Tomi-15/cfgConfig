<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cfgConfig.Core</name>
    </assembly>
    <members>
        <member name="T:cfgConfig.Core.Attributes.ConfigAttribute">
            <summary>
            Attribute that a class must has to define it as configuration
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Attributes.ConfigAttribute.Name">
            <summary>
            The name of the configuration
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Encryptation.AES.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypts a file
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Encryptation.AES.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decrypts a file
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Encryptation.AES.GenerateRandomSalt">
            <summary>
            Creates a random salt that will be used to encrypt
            </summary>
            <returns></returns>
        </member>
        <member name="T:cfgConfig.Core.ConfigurationManager">
            <summary>
            Creates a new manager to handle configurations
            </summary>
        </member>
        <member name="P:cfgConfig.Core.ConfigurationManager.Implementations">
            <summary>
            Property that is used to implement new configurations to the manager
            </summary>
        </member>
        <member name="P:cfgConfig.Core.ConfigurationManager.Settings">
            <summary>
            Property that is used to configure the manager
            </summary>
        </member>
        <member name="P:cfgConfig.Core.ConfigurationManager.Path">
            <summary>
            Gets the working path of the current configuration manager
            </summary>
        </member>
        <member name="P:cfgConfig.Core.ConfigurationManager.Identifier">
            <summary>
            A name that identifies this configuration manager
            </summary>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.Make(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:cfgConfig.Core.ConfigurationManager"/>
            </summary>
            <param name="path">The path to the folder where the config files will be stored</param>
            <param name="identifier">A unique name that identifies the manager</param>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.Terminate">
            <summary>
            Saves any pending configuration change and terminates all the managers created
            </summary>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.GetManager(System.String)">
            <summary>
            Search and returns a <see cref="T:cfgConfig.Core.ConfigurationManager"/>. If not found, it will return null
            </summary>
            <param name="identifier">The identifier of the configuration manager to return</param>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.UseConsole">
            <summary>
            If its true, instead of throwing exceptions when something happens, it will send a message to the console. Otherwise, it will throw an exception.
            </summary>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.GetManagerWhoImplements``1">
            <summary>
            Returns a <see cref="T:cfgConfig.Core.ConfigurationManager"/> who implements a configuration type
            </summary>
            <typeparam name="TConfig">The configuration type</typeparam>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.GetConfig``1">
            <summary>
            Gets a configuration type from the manager
            </summary>
            <typeparam name="TConfig">The type of configuration to get</typeparam>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.GetConfig(System.Type)">
            <summary>
            Gets a configuration type from the manager
            </summary>
            <param name="configType">The type of configuration to get</param>
        </member>
        <member name="M:cfgConfig.Core.ConfigurationManager.ToString">
            <summary>
            Returns an string representation of the manager that contains
            the identifier name and the watching path
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Engine.Settings.ConfigurationManagerSettings">
            <summary>
            Contains the settings to build any <see cref="T:cfgConfig.Core.ConfigurationManager"/>
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Engine.Settings.ConfigurationManagerSettings.WithSaveMode(cfgConfig.Core.Files.SaveModes)">
            <summary>
            Indicates the manager to use an specific save mode
            </summary>
            <param name="mode">The mode to use</param>
        </member>
        <member name="M:cfgConfig.Core.Engine.Settings.ConfigurationManagerSettings.WithAutoSaveEach(System.TimeSpan)">
            <summary>
            Indicates the manager to save all the configurations at specific interval of time
            </summary>
            <param name="interval">The interval timespan</param>
        </member>
        <member name="M:cfgConfig.Core.Engine.Settings.ConfigurationManagerSettings.ConfigureBackups">
            <summary>
            Indicates the manager to create backup files of the configurations files 
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Engine.Settings.ConfigurationManagerSettings.Encrypt">
            <summary>
            Indicates the manager to encrypt the files before serialize
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Exceptions.BadConfigTypeException">
            <summary>
            Thrown when a class that is not marked as Config is tried to be
            implemented as one of it
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Exceptions.BadConfigTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cfgConfig.Core.Exceptions.BadConfigTypeException"/> exception with an error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:cfgConfig.Core.Exceptions.ConfigNotFoundException">
            <summary>
            Exception thrown when a config type is requested but it isn't implemented
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Exceptions.ConfigNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:cfgConfig.Core.Exceptions.ConfigNotFoundException"/> with an error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:cfgConfig.Core.Exceptions.DuplicatedConfigException">
            <summary>
            Thrown when a configuration type is tried to be added when
            its already implemented
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Exceptions.DuplicatedConfigException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:cfgConfig.Core.Exceptions.DuplicatedConfigException"/> class.
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:cfgConfig.Core.Extensions.ConfigurationExtensions">
            <summary>
            Extensions methods to work with configurations
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Extensions.ConfigurationExtensions.SaveConfig``1(``0)">
            <summary>
            Saves an specific configuration type
            </summary>
            <typeparam name="TConfig">The configuration type to save</typeparam>
            <param name="config">The configuration to save</param>
        </member>
        <member name="T:cfgConfig.Core.Files.ConfigFile">
            <summary>
            Represents a configuration file
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Files.ConfigFile.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Files.ConfigFile.FullName">
            <summary>
            The path to the file with its name
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Files.ConfigFile.Exists">
            <summary>
            Indicates if the file exists
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Files.ConfigFile.Encrypted">
            <summary>
            Indicates if the file is encrypted or not
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Files.ConfigFile.#ctor(System.String)">
            <summary>
            Creates a new ConfigFile
            </summary>
            <param name="path">The path to the file</param>
        </member>
        <member name="M:cfgConfig.Core.Files.ConfigFile.Create">
            <summary>
            Creates the file
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Files.ConfigFile.Encrypt">
            <summary>
            Encrypts the file
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Files.ConfigFile.Decrypt">
            <summary>
            Decrypts the file
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Files.SaveModes">
            <summary>
            The available save modes for configuration files
            </summary>
        </member>
        <member name="F:cfgConfig.Core.Files.SaveModes.Json">
            <summary>
            The configuration type will be serialized in Json and then, saved
            </summary>
        </member>
        <member name="F:cfgConfig.Core.Files.SaveModes.Xml">
            <summary>
            The configuration type will be serialized in XML and then, saved
            </summary>
        </member>
        <member name="F:cfgConfig.Core.Files.SaveModes.Binary">
            <summary>
            The configuration type will be binary serialized and then, saved
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Implementation.BaseConfigImplementation">
            <summary>
            The base class for each config implementation
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.BaseConfigImplementation.Name">
            <summary>
            Implementation's name
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.BaseConfigImplementation.RuntimeInstance">
            <summary>
            Implementation's runtime instance
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.BaseConfigImplementation.Type">
            <summary>
            Implementation's type
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.BaseConfigImplementation.File">
            <summary>
            Implementation's config file
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.BaseConfigImplementation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.BaseConfigImplementation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Implementation.ConfigImplementation">
            <summary>
            Implementation of the <see cref="T:cfgConfig.Core.Implementation.BaseConfigImplementation"/> class
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.ConfigImplementation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Implementation.ConfigImplementation`1">
            <summary>
            Implementation of the <see cref="T:cfgConfig.Core.Implementation.BaseConfigImplementation"/> with generic implementation
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.ConfigImplementation`1.RuntimeInstance">
            <summary>
            The generic runtime instance
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Implementation.Base.ConfigImplementer">
            <summary>
            Reponsable class that implements configuration types
            </summary>
        </member>
        <member name="P:cfgConfig.Core.Implementation.Base.ConfigImplementer.Count">
            <summary>
            Gets the count of configurations implemented
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.Implement``1">
            <summary>
            Implements a configuration type
            </summary>
            <typeparam name="TConfig">The type of config to implement</typeparam>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.Implement(System.Type)">
            <summary>
            Implements a configuration type
            </summary>
            <param name="configType">The type of config to implement</param>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.Has``1">
            <summary>
            Returns a boolean indicating if a configuration type is implemented
            </summary>
            <typeparam name="TConfig">The type of configuration to check</typeparam>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.SaveAllImplementations">
            <summary>
            Saves all types
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.SaveImplementation(System.Type)">
            <summary>
            Saves an implementation
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.GetImplementation``1">
            <summary>
            Gets a registered implementation
            </summary>
            <typeparam name="T">The type of implementation to get</typeparam>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.GetBaseImplementation(System.Type)">
            <summary>
            Gets a registered implementation
            </summary>
        </member>
        <member name="M:cfgConfig.Core.Implementation.Base.ConfigImplementer.GetConfigImplementations">
            <summary>
            Gets all config implementations
            </summary>
        </member>
        <member name="T:cfgConfig.Core.Implementation.IConfig">
            <summary>
            Interface that mark a class to act as a configuration type
            </summary>
        </member>
    </members>
</doc>
